{"version":3,"sources":["components/item.tsx","components/items.tsx","validators/validators.ts","validators/formControls.tsx","components/gallery-form.tsx","api/gallery-api.js","redux/gallery-reducer.ts","components/gallery.tsx","App.tsx","serviceWorker.js","redux/store.ts","index.tsx","css/gallery.module.css"],"names":["Item","props","imgData","item","img","newImg","Image","src","className","style","gallery__item","alt","href","download","itemText__first","itemText__second","title","descr","name","size","type","width","height","onClick","deleteGalleryItem","Items","console","log","items__main","map","key","requiredField","value","maxLength","maxLenght","length","Input","input","meta","hasError","touched","error","formcontrol","Textarea","FileSubmitField","htmlFor","maxLength5","maxLength25","ImageForm","React","memo","item__form","onSubmit","handleSubmit","item__title","item__text","Field","validate","component","item__descr","item__upload","selectImage","GalleyReduxForm","reduxForm","form","db","Dexie","version","stores","items","open","catch","err","stack","initializeItems","a","toArray","allItems","deleteItem","id","delete","allPosts","galleryAPI","file","Promise","resolve","reader","FileReader","readAsDataURL","onload","e","itemImg","target","result","totalItem","add","then","initialState","actions","galleryReducer","state","action","Gallery","this","galleryInitializing","head__title","formData","some","alert","setGalleryItem","reset","bot__title","botTitle","Component","connect","gallery","dispatch","resp","res","App","Boolean","window","location","hostname","match","rootReducer","combineReducers","formReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"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","file":"static/js/main.792918d3.chunk.js","sourcesContent":["import React from 'react'\r\nimport style from '../css/gallery.module.css'\r\nimport { ItemPropsType } from '../types/types'\r\n\r\n\r\ntype PropsType = {\r\n    item: ItemPropsType\r\n    deleteGalleryItem: (title: string) => void\r\n}\r\n\r\nconst Item: React.FC<PropsType> = (props) => {\r\n\r\n    let imgData = props.item.img\r\n    let newImg = new Image()\r\n    newImg.src = imgData\r\n\r\n    return <div className={style.gallery__item}>\r\n\r\n        <div>\r\n            <img alt='img' src={props.item.img} />\r\n        </div>\r\n\r\n        <div>\r\n            <a href={props.item.img} download={props.item.img} >Download</a>\r\n            <span className={style.itemText__first}>\r\n                Title: <span className={style.itemText__second}> {props.item.title} </span>\r\n            </span>\r\n            <span className={style.itemText__first}>\r\n                Description: <span className={style.itemText__second}>{props.item.descr}  </span>\r\n            </span>\r\n            <span className={style.itemText__first}>\r\n                Name: <span className={style.itemText__second}>{props.item.name} </span>\r\n            </span>\r\n            <span className={style.itemText__first}>\r\n                Size: <span className={style.itemText__second}>{props.item.size} byte </span>\r\n            </span>\r\n            <span className={style.itemText__first}>\r\n                Type: <span className={style.itemText__second}>{props.item.type}</span>\r\n            </span>\r\n            <span className={style.itemText__first}>\r\n                Width: <span className={style.itemText__second}>{newImg.width} pixels</span>\r\n            </span>\r\n            <span className={style.itemText__first}>\r\n                Height: <span className={style.itemText__second}>{newImg.height} pixels</span>\r\n            </span>\r\n            <button onClick={\r\n                () => { props.deleteGalleryItem(props.item.title) }\r\n            }>Delete</button>\r\n\r\n        </div>\r\n    </div>\r\n}\r\nexport default Item","\r\nimport React from 'react'\r\nimport style from '../css/gallery.module.css'\r\nimport Item from './item'\r\nimport { ItemPropsType } from '../types/types'\r\n\r\ntype ItemProps = {\r\n    item: Array<ItemPropsType>\r\n    deleteGalleryItem: (title: string) => void\r\n}\r\n\r\n\r\nconst Items: React.FC<ItemProps> = (props) => {\r\n    console.log(props.item)\r\n    return <div className={style.items__main}>\r\n        {props.item.map((item: any) => <Item deleteGalleryItem={props.deleteGalleryItem}\r\n            key={item.title} item={item} />)}\r\n    </div>\r\n\r\n}\r\nexport default Items","export type FieldValidatorType = (value: string) => string | undefined\r\n\r\n\r\nexport const requiredField: FieldValidatorType = (value) => {\r\n    if (value) return undefined\r\n    return 'Please fill the field'\r\n}\r\n\r\nexport const maxLength = (maxLenght: number): FieldValidatorType => (value) => {\r\n    if (value.length > maxLenght) return `max lenght is ${maxLenght} symbols`\r\n    return undefined\r\n}","import React from 'react'\r\nimport style from '../css/gallery.module.css'\r\nimport { WrappedFieldProps, WrappedFieldInputProps, WrappedFieldMetaProps } from \"redux-form\";\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = ({ input, meta, ...props }) => {\r\n  const hasError = meta.touched && meta.error\r\n\r\n  return (\r\n    <div className={style.formcontrol + \" \" + (hasError ? style.error : \"\")}>\r\n\r\n      <input {...input} {...props} />\r\n      <div>\r\n        {hasError && <span>{meta.error}</span>}\r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = ({ input, meta, ...props }) => {\r\n  const hasError = meta.touched && meta.error\r\n\r\n  return (\r\n    <div className={style.formcontrol + \" \" + (hasError ? style.error : \"\")}>\r\n\r\n      <textarea {...input} {...props} />\r\n      <div>\r\n        {hasError && <span>{meta.error}</span>}\r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\ntype FieldSubmitType = {\r\n  input: WrappedFieldInputProps\r\n  meta: WrappedFieldMetaProps\r\n  type: any\r\n}\r\n\r\n\r\nexport const FileSubmitField: React.FC<FieldSubmitType> = ({ input, type, meta }) => {\r\n  const hasError = meta.touched && meta.error\r\n  delete input.value\r\n\r\n  return (\r\n\r\n    <div className={style.formcontrol + \" \" + (hasError ? style.error : \"\")}>\r\n\r\n      <label htmlFor={input.name}>\r\n        <input {...input} type={type} />\r\n      </label>\r\n      <div>\r\n        {hasError && <span>{meta.error}</span>}\r\n      </div>\r\n    </div>\r\n  )\r\n}","\r\nimport React from 'react'\r\nimport style from '../css/gallery.module.css'\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form'\r\nimport { requiredField, maxLength } from '../validators/validators'\r\nimport { Textarea, Input, FileSubmitField } from '../validators/formControls'\r\n\r\nconst maxLength5 = maxLength(5)\r\nconst maxLength25 = maxLength(25)\r\n\r\nconst ImageForm: React.FC<InjectedFormProps> = React.memo((props) => {\r\n    return <div className={style.item__form}>\r\n        <form onSubmit={props.handleSubmit}>\r\n\r\n            <div className={`${style.item__title} ${style.item__text}`}>\r\n                <label>Please write image title\r\n                    <Field validate={[requiredField, maxLength5]} component={Input} type={'text'} name={'title'} />\r\n                </label>\r\n            </div>\r\n\r\n            <div className={`${style.item__descr} ${style.item__text}`}>\r\n                <label>Please write image description\r\n                    <Field validate={[requiredField, maxLength25]} component={Textarea} type={'text'} name={'descr'} />\r\n                </label>\r\n            </div>\r\n\r\n            <div className={`${style.item__upload} ${style.item__text}`}>\r\n                <label className={style.selectImage}>Select the image\r\n                <Field validate={[requiredField]} name=\"file\" type=\"file\" component={FileSubmitField} />\r\n                </label>\r\n            </div>\r\n\r\n            <button>Submit</button>\r\n        </form>\r\n    </div>\r\n}\r\n)\r\n\r\nconst GalleyReduxForm = reduxForm({ form: 'imageForm' })(ImageForm)\r\n\r\nexport default GalleyReduxForm","import Dexie from \"dexie\"\r\n\r\nconst db = new Dexie(\"ReactDexie\");\r\n\r\ndb.version(1).stores({\r\n    items: \"title, descr, img\"\r\n})\r\ndb.open().catch((err) => {\r\n    console.log(err.stack || err)\r\n})\r\n\r\nexport const initializeItems = async () => {\r\n    let allItems = await db.items.toArray()\r\n    return allItems\r\n}\r\n\r\nexport const deleteItem = async (id) => {\r\n    db.items.delete(id)\r\n    let allPosts = await db.items.toArray()\r\n    return allPosts\r\n}\r\n\r\nexport const galleryAPI = {\r\n    setItem(item) {\r\n        let file = item.file[0]\r\n\r\n        return new Promise(resolve => {\r\n            let reader = new FileReader()\r\n            reader.readAsDataURL(file)\r\n            reader.onload = (e) => {\r\n                let itemImg = e.target.result\r\n                let totalItem = {\r\n                    title: item.title,\r\n                    descr: item.descr,\r\n                    img: itemImg,\r\n                    name: file.name,\r\n                    size: file.size,\r\n                    type: file.type\r\n                }\r\n                db.items.add(totalItem).then(async () => {\r\n                    let allItems = await db.items.toArray()\r\n                    resolve(allItems)\r\n                })\r\n            }\r\n        })\r\n    }\r\n}\r\n","import { Dispatch } from 'redux'\r\nimport { galleryAPI } from '../api/gallery-api'\r\nimport { initializeItems, deleteItem } from '../api/gallery-api'\r\nimport { InferActionsTypes } from '../redux/store'\r\nimport { ItemPropsType } from '../types/types'\r\n\r\nconst GET_ITEM = 'GAL/GET_ITEM'\r\n\r\nlet initialState = {\r\n    item: '' as Array<ItemPropsType> | string\r\n}\r\n\r\nconst galleryReducer = (state = initialState, action: ActionsType) => {\r\n\r\n    switch (action.type) {\r\n        case GET_ITEM: {\r\n            return {\r\n                ...state,\r\n                item: action.item\r\n            }\r\n        }\r\n\r\n        default: return state\r\n    }\r\n}\r\n\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\n\r\n\r\nexport const actions = {\r\n    getItem: (item: ItemPropsType) => ({ type: GET_ITEM, item } as const)\r\n\r\n}\r\n\r\nexport const setGalleryItem = (item: ItemPropsType) => async (dispatch: Dispatch<ActionsType>) => {\r\n    let resp = await galleryAPI.setItem(item)\r\n    dispatch(actions.getItem(resp))\r\n}\r\n\r\n\r\nexport const galleryInitializing = () => (dispatch: Dispatch<ActionsType>) => {\r\n\r\n    initializeItems().then(res => {\r\n        dispatch(actions.getItem(res))\r\n    })\r\n}\r\n\r\nexport const deleteGalleryItem = (id: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    deleteItem(id).then(res => {\r\n        dispatch(actions.getItem(res))\r\n    })\r\n}\r\n\r\nexport default galleryReducer","import React from 'react'\r\nimport style from '../css/gallery.module.css'\r\nimport Items from './items'\r\nimport ImageForm from './gallery-form'\r\nimport { connect } from 'react-redux'\r\nimport { setGalleryItem, deleteGalleryItem, galleryInitializing } from '../redux/gallery-reducer'\r\nimport { reset } from 'redux-form';\r\n\r\ntype StatePropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype DispatchPropsType = {\r\n    galleryInitializing: () => void\r\n    setGalleryItem: (title: any) => void\r\n    reset: (text: string) => void\r\n    deleteGalleryItem: (id: string) => void\r\n}\r\n\r\ntype PropsType = StatePropsType & DispatchPropsType\r\n\r\n\r\nclass Gallery extends React.Component<PropsType> {\r\n\r\n    componentDidMount() {\r\n        this.props.galleryInitializing()\r\n    }\r\n\r\n    render() {\r\n        const onSubmit = (formData: any) => {\r\n\r\n            if (this.props.item.some((e: any) => e.title === formData.title)) {\r\n                alert('this title is already exist,please choose another one')\r\n\r\n            } else {\r\n                this.props.setGalleryItem(formData)\r\n            }\r\n            this.props.reset('imageForm')\r\n        }\r\n\r\n        return <div>\r\n            <h3 className={style.head__title}>Please download the image</h3>\r\n            <ImageForm onSubmit={onSubmit} />\r\n            <h3 className={style.bot__title}>Images: </h3>\r\n            {\r\n                this.props.item.length ?\r\n                    <Items item={this.props.item} deleteGalleryItem={this.props.deleteGalleryItem} />\r\n                    : <h4 className={style.botTitle}>Storage is empty you can upload something</h4>\r\n            }\r\n        </div >\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n    item: state.gallery.item\r\n})\r\n\r\nexport default connect(mapStateToProps, { reset, setGalleryItem, galleryInitializing, deleteGalleryItem })(Gallery)","  \nimport React from 'react'\nimport './App.css'\nimport Gallery from './components/gallery'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Gallery />\n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","  \r\nimport { applyMiddleware, combineReducers, createStore } from 'redux'\r\nimport galleryReducer from './gallery-reducer'\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { compose } from 'redux'\r\n\r\nlet rootReducer = combineReducers({\r\n    gallery: galleryReducer,\r\n    form: formReducer\r\n})\r\n\r\ntype RootReducerType = typeof rootReducer\r\n\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\nexport type InferActionsTypes<T> = T extends { [key: string]: (...args: any[]) => infer U } ? U : never\r\n\r\n//@ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)))\r\n\r\nexport default store","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport {Provider} from 'react-redux'\nimport store from './redux/store'\n\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"addImgBtn\":\"gallery_addImgBtn__3xDvd\",\"head__title\":\"gallery_head__title__3-iZV\",\"bot__title\":\"gallery_bot__title__3oGZn\",\"item__text\":\"gallery_item__text__2QrBD\",\"item__form\":\"gallery_item__form__4Au6I\",\"itemimage__size\":\"gallery_itemimage__size__3Vpg4\",\"items__main\":\"gallery_items__main__aWQWJ\",\"gallery__item\":\"gallery_gallery__item__2BLMT\",\"selectImage\":\"gallery_selectImage__1hPV-\",\"formcontrol\":\"gallery_formcontrol__2t5rK\",\"error\":\"gallery_error__SIckv\",\"itemText__first\":\"gallery_itemText__first__3HaGf\",\"itemText__second\":\"gallery_itemText__second__3jKD-\",\"botTitle\":\"gallery_botTitle__3aMJX\"};"],"sourceRoot":""}